


# main.py
import sys
from multiprocessing import Process, shared_memory, Lock, shared_memory
from datetime import datetime
import numpy as np
import time

import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'function'))

import threading

import serial
import re
import asyncio


# plotter_gps.py
import scipy.interpolate as interpolate
import pyautogui as pag
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import matplotlib.patches as patches
import seaborn as sns
from adjustText import adjust_text
import subprocess





"""GPS用Bluetooth設定"""
MAX_HOURS   = 2
DURATION = int(MAX_HOURS*60*60)

GPS_BT_ADDRESS = "08:A6:F7:92:74:9A" # GPS 1

# GPS_PORT        = "COM9" #README_hmを参照して設定
# GPS_PORT        = "COM5" # mtsuzki home PC & stick PC
# GPS_PORT        = "COM6" # Tough Book Takakura
# GPS_PORT        = "COM14" # Tough Book GPS_1 
# GPS_PORT        = "COM16" # Tough Book GPS_2
GPS_PORT        = "/dev/rfcomm0" # RasberryPi
GPS_BAUDRATE    = 9600
GPS_TIMEOUT     = 1

HAP_PORT        = "/dev/ttyACM0"

BUFFER_DURATION = DURATION  # バッファの長さを指定する（秒単位）
RECEIVE_RATE = 10 # データ受信レート（Hz単位）
BUFFER_SIZE = BUFFER_DURATION * RECEIVE_RATE # バッファサイズを計算

GPS_SHAPE = (int(DURATION * RECEIVE_RATE), 5)  #5列: pc_time, utc_date, utc_time, lat, lon 
GPS_DTYPE = np.float64
FLG_SHAPE = (int(DURATION * RECEIVE_RATE), 3)  #3列: time, activate_flag, label(ブレーキ,右、左)
FLG_DTYPE = np.float64

USEFLAG_GPS = 1
FIGFLAG     = 1
USEFLAG_Hap = 1

SAVEINTERVAL = 10 # ファイル保存間隔 [sec]


# 排他処理用設定
global_lock = Lock()

# グローバル変数
gps_process = None
plot_gps_process = None
plot_one_figure = None

save_directory = None
save_thread_running = True

# 前回保存したインデックスを記録
last_saved_indices = {
    'gps': 0,
    'flg': 0,
}

# 共有メモリをfloat前提で作成 フラグOn時のラベルを数値に変換
LABEL_MAP = {
    "none": 0.0,
    "brake": 1.0,
    "left": 2.0,
    "right": 3.0
}


# --- function GPS Bluetooth connect --------------------------------------

def bind_bluetooth():
    try:
        subprocess.run(["sudo", "rfcomm", "bind", "/dev/rfcomm0", GPS_BT_ADDRESS], check=True)
        print("Bluetooth デバイスと接続されました。")
    except subprocess.CalledProcessError as e:
        print("Bluetooth 接続に失敗しました。", e)

# --- function save --------------------------------------


def stop_processes():

	if USEFLAG_GPS:
		gps_process.terminate()
		# if FIGFLAG:
		# 	plot_gps_process.terminate()

	plot_one_figure_process.terminate()

	print("Acquisition stopped by user.")

# 定期ファイル保存機能追加
def save_data_periodically(interval=60):
    # while True:
    #     time.sleep(interval)
    #     save_data()
	global save_thread_running
	while save_thread_running:
		time.sleep(interval)
		save_data()

def save_data():
	global save_directory
	
	with global_lock:
		print("Saving Data (periodically)...")
		now = datetime.now()
		savedatetime = now.strftime("%Y%m%d%H%M%S")

		if save_directory is None:
			save_directory = u'./savedata/SaveData_' + savedatetime
			os.makedirs(save_directory, exist_ok=True)

		savedir = save_directory
		fmt = '%.18e'  # 科学記数法で出力するフォーマット

		try:


			if USEFLAG_GPS:
				# gps_index = int(np.max(gps_array[:, 1]))
				gps_index = int(np.argmax(gps_array[:, 0]))
				gps_data_to_save = gps_array[last_saved_indices['gps']:gps_index + 1]
				file_path = savedir + u"/gps_data.txt"
				if not os.path.exists(file_path):
					header = "pc_time, utc_date, utc_time, lat, lon"
				else:
					header = ''
				with open(savedir + u"/gps_data.txt", 'a') as f:
					np.savetxt(f, gps_data_to_save, delimiter=",", header=header, comments='', fmt=fmt)
				print("Data appended to 'gps_data.txt'.")
				last_saved_indices['gps'] = gps_index + 1
                
				flg_index = int(np.argmax(flg_array[:, 0]))
				flg_data_to_save = flg_array[last_saved_indices['flg']:flg_index + 1]
				file_path = savedir + u"/flg_data.txt"
				if not os.path.exists(file_path):
					header = "pc_time, flag"
				else:
					header = ''
				with open(savedir + u"/flg_data.txt", 'a') as f:
					np.savetxt(f, flg_data_to_save, delimiter=",", header=header, comments='', fmt=fmt)
				print("Data appended to 'flg_data.txt'.")
				last_saved_indices['flg'] = flg_index + 1



		except Exception as e:
			print(f"An error occurred while saving data: {e}")

# --- function GPS Device --------------------------------------

# GPSからのNMEAデータを解析する関数
def parse_gprmc(sentence):
    match = re.match(
        r'^\$GNRMC,(\d{6}\.\d+),([AV]),(\d{2})(\d{2}\.\d+),([NS]),(\d{3})(\d{2}\.\d+),([EW]),.*?,(\d{6}),', sentence)
    if match:
        time_utc = match.group(1)  # UTC時刻
        status = match.group(2)
        lat_deg = match.group(3)
        lat_min = match.group(4)
        lat_dir = match.group(5)
        lon_deg = match.group(6)
        lon_min = match.group(7)
        lon_dir = match.group(8)
        date_utc = match.group(9)  # UTC日付

        if status == 'A':  # データが有効な場合
            latitude = (float(lat_deg) + float(lat_min) / 60.0) * (-1 if lat_dir == 'S' else 1)
            longitude = (float(lon_deg) + float(lon_min) / 60.0) * (-1 if lon_dir == 'W' else 1)
            
            # UTC時刻を秒単位に変換
            hours = int(time_utc[:2])
            minutes = int(time_utc[2:4])
            seconds = float(time_utc[4:])
            utc_time_seconds = np.float64(hours * 3600 + minutes * 60 + seconds)

            # UTC日付を"yyyymmdd"として整数化（64ビットに収まる範囲で）
            day = int(date_utc[:2])
            month = int(date_utc[2:4])
            year = int('20' + date_utc[4:6])  # 20xx年と仮定
            utc_date = np.float64(year * 10000 + month * 100 + day)

            return utc_date, utc_time_seconds, latitude, longitude
    return None, None, None, None

async def read_gps_data(serial_port, array, start_time):
    try:
        while True:
            # データを非同期に読み取る
            line = await asyncio.to_thread(serial_port.readline)
            line = line.decode('ascii', errors='replace').strip()

            if line.startswith('$GNRMC'):
                utc_date, utc_time_seconds, lat, lon = parse_gprmc(line)
                if utc_date is not None and utc_time_seconds is not None and lat is not None and lon is not None:

                    # current_time = datetime.now()
                    # pc_time = (current_time - start_time).total_seconds()
                    current_time = int(time.time() * 1000)
                    elapsed_time = np.float32(current_time - start_time)  # float32で記録
                    # 共有メモリに保存
                    index = np.where(array[:, 0] == 0)[0]
                    if index.size > 0:
                        index = index[0]
                        array[index, :] = [elapsed_time, utc_date, utc_time_seconds, lat, lon]

                    if index >= BUFFER_SIZE:
                        print("Buffer full. Stopping logging.")
                        return

    except asyncio.CancelledError:
        # 非同期処理がキャンセルされた場合
        print("Logging stopped by user.")

async def log_gps_data(shared_mem_name, start_time):
    existing_shm = shared_memory.SharedMemory(name=shared_mem_name)
    array = np.ndarray(GPS_SHAPE, dtype=GPS_DTYPE, buffer=existing_shm.buf)
    with serial.Serial(GPS_PORT, GPS_BAUDRATE, timeout=GPS_TIMEOUT) as ser:
        await read_gps_data(ser, array, start_time)

def start_gps_receiver(shared_mem_name, start_time):
    try:
        asyncio.run(log_gps_data(shared_mem_name, start_time))

    except KeyboardInterrupt:
        print("GPS Process: Acquisition stopped by user.")

# --- function shared_memory --------------------------------------

def create_shared_memory(shape, dtype, shmname):
    n_bytes = int(np.prod(shape) * np.dtype(dtype).itemsize)
    shm = shared_memory.SharedMemory(create=True, size=n_bytes, name=shmname)
    array = np.ndarray(shape, dtype=dtype, buffer=shm.buf)
    array.fill(0)
    return shm , array


# --- function plotter --------------------------------------

# フラグ判定モード（"circle"=円判定, "line"=ライン判定）
# flag_mode = "circle"
flag_mode = "line"

# circle_origin = (35.0549, 137.1631)  # 本社T/C入口
# circle_origin = (35.0532, 137.1653)  # 東バンク入口
circle_origin = (3.495835912666666611e+01,1.371432051900000033e+02)  # 自宅付近 テスト用
circle_radius_m = 3  # 円の半径をメートル単位で指定

# ラインの定義（2点で決まる）
# line_point1 = (35.0531, 137.1653)  # ライン 東バンク１
# line_point2 = (35.0532, 137.1655)  # ライン 東バンク２
# line_point1 = (35.0550, 137.1609)  # ライン 本社 構内路 オーバーブリッジ手前
# line_point2 = (35.0550, 137.1611)  # ライン 本社 構内路 オーバーブリッジ手前
line_point1 = (35.222120, 138.903772)  # ライン 東富士 第二水直 南側
line_point2 = (35.222156, 138.903682)  # ライン 東富士 第二水直 南側


line_segments = [
    # ((34.958242, 137.143170), (34.958405, 137.143268)),  # 自宅 テスト用ライン１
    # ((34.958263, 137.143110), (34.958422, 137.143223)),  # 自宅 テスト用ライン２
    # ((34.958177, 137.143282), (34.958190, 137.143408)),  # 自宅 テスト用ライン１
    # ((34.958229, 137.143353), (34.958422, 137.143223)),  # 自宅 テスト用ライン２
    # ((35.222120, 138.903772), (35.222156, 138.903682)),  # 東富士 第二水直 南側
    # ((35.228230, 138.907711), (35.228202, 138.907791)),  # 東富士 第二水直 北側
    # ((35.227363, 138.898499), (35.227162, 138.898976)),  # 東富士第1周回路 南バンク
    # ((35.229320, 138.907466), (35.229140, 138.907891)),  # 東富士第1周回路 南バンク
    # ((35.231023, 138.889509), (35.231027, 138.889901)),  # 東富士第3周回路 内周路１
    # ((35.232067, 138.888676), (35.231789, 138.888647)),  # 東富士第3周回路 内周路２
    # ((35.232486, 138.887550), (35.232614, 138.887853)),  # 東富士第3周回路 内周路３
    # ((35.233201, 138.886413), (35.232819, 138.886490)),  # 東富士第3周回路 内周路４
    # ((35.234496, 138.885182), (35.234388, 138.885701)),  # 東富士第3周回路 内周路５
    # ((35.235484, 138.885094), (35.235492, 138.885678)),  # 東富士第3周回路 内周路６
    # ((35.233363, 138.888180), (35.233004, 138.888113)),  # 東富士第3周回路 内周路７

    # ((35.230841, 138.889401), (35.230813, 138.889936), 0),  # 東富士第3周回路 内周路１
    # ((35.232091, 138.888844), (35.231729, 138.888825), 0),  # 東富士第3周回路 内周路２
    # ((35.232522, 138.887481), (35.232571, 138.887966), 0),  # 東富士第3周回路 内周路３
    # ((35.233258, 138.886680), (35.232938, 138.886735), 0),  # 東富士第3周回路 内周路４
    # ((35.234392, 138.885085), (35.234292, 138.885730), 0),  # 東富士第3周回路 内周路５
    # ((35.235484, 138.885094), (35.235492, 138.885678), 0),  # 東富士第3周回路 内周路６
    # ((35.233363, 138.888180), (35.233004, 138.888113), 0),  # 東富士第3周回路 内周路７

    # E1 まわりのテスト用 ver.1
    # ((35.225698, 138.906106), (35.225457, 138.906664), 0, "brake"),  # 東富士 E1周り １
    # ((35.224649, 138.905526), (35.224530, 138.905797), 0, "brake"),  # 東富士 E1周り ２
    # ((35.224213, 138.905272), (35.224139, 138.905513), 0, "left" ),  # 東富士 E1周り ４
    # ((35.224327, 138.907800), (35.224208, 138.908054), 0, "brake"),  # 東富士 E1周り ５
    # ((35.225436, 138.907942), (35.225472, 138.908142), 0, "left" ),  # 東富士 E1周り ６

    # E1 まわりのテスト用 ver.2 ラインの位置調整
    ((35.22557846, 138.90663924), (35.22581362, 138.90616892), 0, "brake"),  # 東富士 E1周り １
    ((35.22495862, 138.90622436), (35.22523028, 138.90578450), 0, "brake"),  # 東富士 E1周り ２
    ((35.22441359, 138.90512185), (35.22406875, 138.90572829), 6.0, "left" ),  # 東富士 E1周り ４
    ((35.22404685, 138.90816530), (35.22431716, 138.90763083), 0, "brake"),  # 東富士 E1周り ５
    ((35.22542605, 138.90836011), (35.22526490, 138.90776325), 7.0, "left" ),  # 東富士 E1周り ６
    # ((35.22582541833333636, 138.9067921183333283), (35.22588561500000282, 138.9065924066666753), 1, "brake"),  # 東富士 E1周り 駐車場テスト



    # 中研さんRパーク 3/21最終版から２版のラインを延長
    # ((35.169188, 137.053708), (35.169259, 137.053923), 0, "brake"),  # 中研さん Rパーク １
    # ((35.168922, 137.053700), (35.168952, 137.054036), 0, "left" ),  # 中研さん Rパーク ２
    # ((35.169166, 137.054234), (35.169210, 137.054400), 0, "right"),  # 中研さん Rパーク ３
    # ((35.168816, 137.054288), (35.168877, 137.054492), 0, "brake"),  # 中研さん Rパーク ４
   
    # 中研さんRパーク 3/21最終
    # ((35.169188, 137.053708), (35.169259, 137.053923), 0),  # 中研さん Rパーク １
    # ((35.168934, 137.053837), (35.168952, 137.054036), 0),  # 中研さん Rパーク ２
    # ((35.169166, 137.054234), (35.169210, 137.054400), 0),  # 中研さん Rパーク ３
    # ((35.168816, 137.054288), (35.168877, 137.054492), 0),  # 中研さん Rパーク ４

    # ヘリポートに向かう構内路の直線でテスト
    # ((35.2240456, 138.8997153), (35.2244030, 138.8999601), 0, "left"),  # 
    # ((35.2243855, 138.8994065), (35.2246049, 138.8996590), 0, "right"),  # 
    # ((35.2246074, 138.8989301), (35.2249722, 138.8991675), 0, "left"),  # 
    # ((35.2248848, 138.8984141), (35.2252493, 138.8986508), 0, "right"),  # 


    # 必要に応じて追加
]


# 直前の位置を保持（初回はNone）
prev_lat = None
prev_lon = None

# グローバル変数としてロックを保持
global_lock = Lock()

def meters_to_degrees(meters, lat):
    """ メートルを緯度・経度の度数に変換（緯度に依存） """
    lat_degree = meters / 111139  # 1度 ≈ 111,139m
    lon_degree = meters / (111139 * np.cos(np.radians(lat)))  # 経度は緯度で補正
    return lat_degree, lon_degree

# 関数: Haversine距離を計算
def haversine(lat1, lon1, lat2, lon2, unit="m"):
    """
    2点間のHaversine距離を計算する。
    
    Parameters:
        lat1, lon1 : float  -> 第1点の緯度・経度
        lat2, lon2 : float  -> 第2点の緯度・経度
        unit       : str    -> 距離の単位 ("m"=メートル, "km"=キロメートル, "mi"=マイル)

    Returns:
        距離（指定された単位）
    """
    R = 6371000  # 地球の半径（メートル）
    
    phi1, phi2 = np.radians([lat1, lat2])
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)

    a = np.sin(delta_phi / 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2.0) ** 2
    distance_m = 2 * R * np.arctan2(np.sqrt(a), np.sqrt(1 - a))

    # 距離単位を変換
    if unit == "km":
        return distance_m / 1000  # キロメートル
    elif unit == "mi":
        return distance_m * 0.000621371  # マイル
    return distance_m  # メートル


def check_position_in_circle(current_lat, current_lon, circle_lat, circle_lon, circle_radius_m, ax):
    """
    現在位置と円の中心の距離を計算し、円の内側にいるかを判定する。

    Parameters:
        current_lat (float): 現在の緯度
        current_lon (float): 現在の経度
        circle_lat (float): 円の中心の緯度
        circle_lon (float): 円の中心の経度
        circle_radius_m (float): 円の半径（メートル）
        ax (matplotlib.axes._subplots.AxesSubplot): プロットする軸

    Returns:
        int: 円の内側なら1、外側なら0
    """
    # 2点間の距離を計算
    distance_to_center = haversine(current_lat, current_lon, circle_lat, circle_lon)
    print("distance_to_center:",distance_to_center)
    # 円の内側にいるかどうかを判定
    inside_flag = 1 if distance_to_center < circle_radius_m else 0

    # タイトルを更新
    status = "Inside" if inside_flag else "Outside"
    ax.set_title(f"Center Point: {circle_lat:.4f}, {circle_lon:.4f} ({status})")

    # 既存のテキストを削除
    for txt in ax.texts:
        txt.remove()

    # 距離を表示するテキストの初期位置
    text_x = circle_lon
    text_y = circle_lat + meters_to_degrees(circle_radius_m * 1.2, circle_lat)[0]  # 円の外側に配置

    # テキストを配置
    text = ax.text(text_x, text_y, 
                   f"{distance_to_center:.1f} m", 
                   fontsize=12, color="black", 
                   ha='center', va='bottom', 
                   bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.3'))

    # `adjust_text` を使用してテキストの位置を自動調整
    adjust_text([text], ax=ax, expand_text=(1.2, 1.2), force_text=(0.1, 0.1))

    return inside_flag

def crosses_line(prev_lat, prev_lon, curr_lat, curr_lon, line_point1, line_point2):
    """現在位置と前回の位置が指定ラインをまたいだかどうかを判定"""
    if prev_lat is None or prev_lon is None:
        return False  # 初回は判定しない

    def ccw(A, B, C):
        return (C[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (C[0] - A[0])

    A = (prev_lon, prev_lat)
    B = (curr_lon, curr_lat)
    C = (line_point1[1], line_point1[0])
    D = (line_point2[1], line_point2[0])

    return ccw(A, C, D) != ccw(B, C, D) and ccw(A, B, C) != ccw(A, B, D)

def crosses_any_line(prev_lat, prev_lon, curr_lat, curr_lon, line_segments):
    """現在位置と前回の位置が指定された複数のラインのいずれかをまたいだか判定"""
    if prev_lat is None or prev_lon is None:
        return False, 0, "none"  # 初回は判定しない

    for line_point1, line_point2, delay, label in line_segments:
        if crosses_line(prev_lat, prev_lon, curr_lat, curr_lon, line_point1, line_point2):
            # return True  # どれかのラインをまたいでいたら即座に True を返す
            return True, delay, label # どれかのラインをまたいでいたら即座に True を返す
    # return False  # どのラインもまたいでいない
    return False, 0, "none"  # どのラインもまたいでいない


def start_plotting_one_figure(shared_mem_name_GPS,shared_mem_name_FLG):

    current_label_name = "none"

    # ser = serial.Serial("COM18",921600)
    if USEFLAG_Hap:
        ser = serial.Serial(HAP_PORT,921600) # ハプティックのポート asberry Pi
        ser.timeout = 0.1
        ser.flush()
        ser.write(bytearray([ord('a')]))
        print(f"found {1+int.from_bytes(ser.read(),'big')} nodes")

    delay_HapOn = 0 # 単位：sec

    activate_flag = 0
    activate_flag_prev = 0
    prev_lat = None
    prev_lon = None
    current_time = 0
    flag_on_time = 0
    flag_HapOn = 0 

    sns.set_style("darkgrid")
    sns.set_palette("dark")

    screen_width, screen_height = pag.size()
    window_width  = screen_width // 4
    window_height = screen_height // 10 * 5
    window_pos_x  = 0
    window_pos_y  = screen_height // 10 * 4

    # 10行2列のグリッドスペックを作成
    fig = plt.figure(figsize=(10, 20))
    gs = gridspec.GridSpec(10, 2, figure=fig)
    fig.canvas.manager.window.wm_geometry(f"{window_width}x{window_height}+{window_pos_x}+{window_pos_y}")

    fig.suptitle("-RealTimeMonitor-", fontsize=16)


    if USEFLAG_GPS:
        # print("USEFLAG_GPS",USEFLAG_GPS)
        existing_shm_GPS = shared_memory.SharedMemory(name=shared_mem_name_GPS)
        array_GPS = np.ndarray(GPS_SHAPE, dtype=GPS_DTYPE, buffer=existing_shm_GPS.buf)
        existing_shm_FLG = shared_memory.SharedMemory(name=shared_mem_name_FLG)
        array_FLG = np.ndarray(FLG_SHAPE, dtype=FLG_DTYPE, buffer=existing_shm_FLG.buf)

        ax12 = fig.add_subplot(gs[0:4, 0:2])

        line12, = ax12.plot([], [], 'k-')
        ax12.set_ylabel("latitude")
        ax12.set_xlabel("longitude")

        # メートル単位の半径を度数に変換
        lat_radius, lon_radius = meters_to_degrees(circle_radius_m, circle_origin[0])

        # 円をあらかじめ設定した中心に配置
        if flag_mode == "circle":
            circle = patches.Circle(circle_origin[::-1], lon_radius, color='blue', alpha=0.1, fill=True)
            ax12.add_patch(circle)
            ax12.scatter(circle_origin[1], circle_origin[0], color='blue', marker='o', s=100, label="Center Point")
        elif flag_mode == "line":
            # ax12.plot([line_point1[1], line_point2[1]], [line_point1[0], line_point2[0]], 'r-', linewidth=3, label="Threshold Line")
            for (point1, point2, _, _) in line_segments:
                ax12.plot([point1[1], point2[1]], [point1[0], point2[0]], 'r-', linewidth=3, label="Threshold Line")

        ax13 = fig.add_subplot(gs[5:10, 0:2])
        line13, = ax13.plot([], [], 'k-')
        ax13.set_ylabel("flag")
        ax13.set_xlabel("time[sec]")


    plt.ion()

    # フラグの履歴を格納するリスト
    flag_history  = []
    time_history  = []
    history_index = 0

    while True:
        with global_lock:
            index_gps   = np.argmax(array_GPS[:, 0]) if USEFLAG_GPS else None
            # print("index_gps",index_gps)

            if index_gps and USEFLAG_GPS:
                if index_gps > 10:
                # if index_gps > 10 and USEFLAG_GPS:
                    # print("USEFLAG_GPS",USEFLAG_GPS)

                    gps_indices = np.where(array_GPS[:, 0] == 0)[0]  # 余分な行を削除
                    if len(gps_indices) > 0:
                        gps_index = min(gps_indices)
                        array_gps_ExcludeZero = array_GPS[:gps_index]
                    else:
                        gps_index = len(array_GPS) - 1  # 0が見つからない場合は全ての行を使用
                        array_gps_ExcludeZero = array_GPS[:gps_index]
                        
                    # 時間軸が厳密に0.1秒刻みではないため、リサンプリングする
                    # 時間データ（3列目）
                    time_data = array_gps_ExcludeZero[:, 2]
                    # 0.1秒ごとの新しい時間軸を作成
                    new_time_data = np.round(np.arange(time_data[0], time_data[-1], 0.1),8)
                    # 線形補間関数を作成
                    interp_func = interpolate.interp1d(time_data, array_gps_ExcludeZero, axis=0, kind='linear',bounds_error=False, fill_value="extrapolate")

                    # 新しい時間軸に沿ってデータをリサンプリング
                    array_gps_ExcludeZero_interp = interp_func(new_time_data)

                    # 計測開始時刻を０秒にシフト（3列目：utc_time）
                    array_gps_ExcludeZero_interp[:,2] = array_gps_ExcludeZero_interp[:,2] - array_gps_ExcludeZero_interp[0,2]

                    lon = array_gps_ExcludeZero_interp[:, 4] # longitude
                    lat = array_gps_ExcludeZero_interp[:, 3] # latitude

                    line12.set_xdata(lon)
                    line12.set_ydata(lat)

                    ax12.relim()
                    ax12.autoscale_view()


                    # 現在地を取得
                    current_lat = array_gps_ExcludeZero_interp[-1, 3]
                    current_lon = array_gps_ExcludeZero_interp[-1, 4]
                    current_time = array_gps_ExcludeZero_interp[-1, 0]


                    if flag_mode == "circle":
                        activate_flag = check_position_in_circle(
                            current_lat, current_lon, circle_origin[0], circle_origin[1], circle_radius_m, ax12
                        )
                    elif flag_mode == "line":
                        # activate_flag = crosses_line(prev_lat, prev_lon, current_lat, current_lon, line_point1, line_point2)
                        # activate_flag, tmp_delay_HapOn = crosses_any_line(prev_lat, prev_lon, current_lat, current_lon, line_segments)
                        activate_flag, tmp_delay_HapOn, tmp_label_name = crosses_any_line(prev_lat, prev_lon, current_lat, current_lon, line_segments)

                        if activate_flag:
                            delay_HapOn = tmp_delay_HapOn
                            current_label_name = tmp_label_name
                        # else:
                        #     current_label_name = "none"
                        # else:
                        #     if activate_flag_prev == 0:
                        #         current_label_name = "none"

                    print("activate_flag_prev",activate_flag_prev)
                    print("activate_flag:",activate_flag)
                    # activate_flag = check_position_in_circle(current_lat, current_lon, circle_origin[0], circle_origin[1], circle_radius_m, ax12)

                    time_history.append(current_time)
                    flag_history.append(activate_flag)

                    # print("current_time",current_time)
                    # print("time_history",time_history)

                    line13.set_xdata(np.array(time_history)/1000)
                    line13.set_ydata(np.array(flag_history))

                    ax13.relim()
                    ax13.autoscale_view()

                    # 位置を更新
                    prev_lat, prev_lon = current_lat, current_lon

                    # 時刻とフラグを共有メモリに保存
                    array_FLG[history_index, 0] = current_time
                    array_FLG[history_index, 1] = activate_flag
                    array_FLG[history_index, 2] = LABEL_MAP[current_label_name] # ラベルを数値に変換
                    print("SHM_FLG", array_FLG[history_index])
                    history_index += 1

                    if history_index >= FLG_SHAPE[0]:
                        print("履歴メモリがいっぱいです。")
                        break  # または保存してクリアなど

            plt.draw()
            plt.pause(0.05)
            plt.show(block=False)

            fig.tight_layout()


            if activate_flag == 1 and activate_flag_prev == 0:
                flag_on_time = current_time 
                print("current_time:",current_time)
                print("flag_on_time:",flag_on_time)
                flag_HapOn = 1


            # print("activate_flag_prev:",activate_flag_prev)
            # print("flag_on_time + delay_HapOn*1000",flag_on_time + delay_HapOn*1000)

            print("if文の中身",(flag_HapOn == 1 and current_time > flag_on_time + delay_HapOn*1000 and USEFLAG_Hap and current_label_name == "brake"))
            print("flag_HapOn",flag_HapOn)
            print("current_time",current_time)
            print("flag_on_time + delay_HapOn*1000 ",flag_on_time + delay_HapOn*1000 )
            print("current_label_name",current_label_name)



            # print("current_label_name",current_label_name)

            # if activate_flag_prev == 1 and current_time > flag_on_time + delay_HapOn*1000:
            if ( flag_HapOn == 1 and current_time >= flag_on_time + delay_HapOn*1000 and USEFLAG_Hap and current_label_name == "brake" ):
                print("current_time:",current_time)
                print("flag_on_time:",flag_on_time)
                print("delay_HapOn",delay_HapOn)

                print("aaaaa")

                # stime = 1.0
                # ser.write(bytearray([ord('p'), 0,0b1111])) # 4つすべて
                # time.sleep(stime)
                # ser.write(bytearray([ord('p'), 0,0]))
                # time.sleep(stime)

                NODE = 1
                ValuePWM = 30

                time.sleep(0.5)
                ser.write(bytearray([ord('R'),NODE,ValuePWM]))
                # print(ser.read())
                time.sleep(0.1)
                ser.write(bytearray([ord('p'),NODE,0b1111]))


                time.sleep(1.0)
                ser.write(bytearray([ord('p'), NODE,0]))

                activate_flag_prev = 0
                flag_HapOn= 0
                current_label_name = "none"

            # activate_flag の状態を保存
            activate_flag_prev = activate_flag


def main():
	global gps_process, plot_gps_process
	global gps_array,flg_array
	global plot_one_figure_process



	start_time = int(time.time() * 1000)

    # 定期的にデータを保存するスレッドを開始
	save_thread = threading.Thread(target=save_data_periodically, args=(SAVEINTERVAL,))
	save_thread.start()

	"""共有メモリの作成"""
	gps_shared_mem, gps_array = create_shared_memory(GPS_SHAPE, GPS_DTYPE, "SHM_GPS")
	gps_shared_mem_name = gps_shared_mem.name
	flg_shared_mem, flg_array = create_shared_memory(FLG_SHAPE, FLG_DTYPE, "SHM_FLG")
	flg_shared_mem_name = flg_shared_mem.name

	print(gps_shared_mem_name)
	print(flg_shared_mem_name)

	"""プロセスの定義"""
	if USEFLAG_GPS:
		gps_process				 = Process(target=start_gps_receiver, 			args=(gps_shared_mem_name,start_time))
		# plot_gps_process		 = Process(target=start_plotting_gps, 			args=(gps_shared_mem_name,bio_shared_mem_LFHF_name,))

	plot_one_figure_process = Process(target=start_plotting_one_figure,		    args=(gps_shared_mem_name,flg_shared_mem_name,))

	"""実行"""
	try:
		"""プロセススタート"""
		if USEFLAG_GPS:
			gps_process.start()
			# if FIGFLAG:
			# 	plot_gps_process.start()
		if FIGFLAG:
			print("Plot Process started")
			plot_one_figure_process.start()

		if USEFLAG_GPS:
			gps_process.join()
			# if FIGFLAG:
			# 	plot_gps_process.terminate()

		plot_one_figure_process.join()


	except KeyboardInterrupt:
		"""キーボードが押されたら終了する"""
		stop_processes()

	finally:
		"""終了前に保存処理する"""
		print("Saving Data...")
		try:
			save_data()  # 終了時にもデータを保存

		except Exception as e:
			print(f"An error occurred while saving data: {e}")

		"""終了前に共有メモリを解放する"""
		try:
			if USEFLAG_GPS:
				gps_shared_mem.close()
				gps_shared_mem.unlink()
				print(f"Shared memories(GPS	  ) '{gps_shared_mem_name}' have been successfully deleted.")
				print(f"Shared memories(FLG	  ) '{flg_shared_mem_name}' have been successfully deleted.")

		except FileNotFoundError:
			if USEFLAG_GPS:
				print(f"Shared memories(GPS) '{gps_shared_mem_name}' do not exist or have already been deleted.")
				print(f"Shared memories(FLG) '{flg_shared_mem_name}' do not exist or have already been deleted.")

		except Exception as e:
			print(f"An error occurred: {e}")

		print("Finish!!!")
		print("Wait... Saving Data")





if __name__ == "__main__":
    # bind_bluetooth()
    exit_code = main()
    sys.exit(exit_code)
